Tools to show
- Perfjankie
- Browser-perf
- Phantomas

Performance Impact
- CSS gradient (ice like headings)
- Huge image, resized to smaller size
- Heavy scroll handler
- Gradual growth 
- Number of nodes changed
- Layers
- Layout thrashing
- Animations
- Average painted area 
- Examples from http://calendar.perfplanet.com/2013/the-runtime-performance-checklist/

Demo
- Start with plain website
- Add bootstrap
- Add grunt


Caveats
- Micro benchmarks vs metrics that usually remain stable
- Impact of Selenium


Architecture
- Probes, Metrics, Actions
- Extensibility

Slides

- Overview of Tools
	- Network performance
	- Rendering Performance
	- Phantoms,
	- PerfJankie and BrowserPerf
		- Actions, Probes and Metrics
		- Selenium
		- Topcoat, Bootstrap-perf
- Lets build a web app [DEMO]
	- In real world, most websites are inherited, so let us do that
	- This presentation is a real website, let us play it back in time (git)
	- First version of website - minimally functional, slides loaded, no theming
	- For the VCs, add styles and images (CSS Ice Gradients and huge images) - remove perf spike
	- Add functionality based on user feedback - Heavy scroll handler, number of nodes layed out, average painted area
	- Doodle during an event - Animation and GC
	- Adding ads, monetization, iframes - layers.
- Caveats
	- Not end user performance numbers
	- Some timing numbers could be micro benchmarks, may not be reproducable
	- Some number
	- May not make sense in absolute terms, graph over time may make more sense
	- Impact of Selenium in this case
- Takeaways
	- Adding front end performance testing to dev cycle is good
	- Can easily catch perf degradations
- PerfMonkey
	- Sign up today
	- If you are a website 
	- If you are a framework 
	- If you are a UI toolkit

